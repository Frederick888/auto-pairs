*AutoPairs.txt* *autopairs* *AutoPairs*

Insert or delete brackets, parens, quotes in pair (a fork by LunarWatcher)

Author:  jiangmiao
Fork: LunarWatcher (Olivia)
License: MIT
URL: https://github.com/jiangmiao/auto-pairs
Fork URL: https://github.com/LunarWatcher/auto-pairs

==============================================================================
CONTENTS                                                    *autopairs-contents*

    1. Installation ............................. |autopairs-installation|
    2. Features ..................................... |autopairs-features|
    3. Fly Mode ...................................... |autopairs-flymode|
    4. Shortcuts ................................... |autopairs-shortcuts|
        4.1. Shortcut remapping ........... |autopairs-shortcut-remapping|
    5. Options ....................................... |autopairs-options|
    6. Troubleshooting ....................... |autopairs-troubleshooting|
        6.1. Conflicting keybinds .................. |autopairs-conflicts|
    7. Credits/contributors .......................... |autopairs-credits|

==============================================================================
1. Installation                                         *autopairs-installation*

With vim-plug

    Plug 'LunarWatcher/auto-pairs'

==============================================================================
2. Features                                                 *autopairs-features*

Insert in pair: >

        input: [
        output: [|]

Delete in pair: >

        input: foo[<BS>]
        output: foo

Insert new indented line after Return: >

        input: {|} (press <CR> at |)
        output: {
            |
        }

Insert spaces before closing characters, only for [], (), {}: >

        input: {|} (press <SPACE> at |)
        output: { | }

        input: {|} (press <SPACE>foo} at |)
        output: { foo }|

        input: '|' (press <SPACE> at |)
        output: ' |'

Skip ' when inside a word: >

        input: foo| (press ' at |)
        output: foo'

Skip closed bracket: >

        input: []
        output: []

Ignore auto pair when previous character is '\': >

        input: "\'
        output: "\'"

Fast Wrap: >

        input: |'hello' (press (<M-e> at |)
        output: ('hello')

    Wrap string, only support c style string.
        input: |'h\\el\'lo' (press (<M-e> at |)
        output ('h\\ello\'')

        input: |[foo, bar()] (press (<M-e> at |)
        output: ([foo, bar()])

Quick jump to closed pair: >

        input:
        {
            something;|
        }

        (press } at |)

        output:
        {

        }|

Support ```, ''' and """: >

        input:
            '''

        output:
            '''|'''

Delete Repeated Pairs in one time: >

        input: """|""" (press <BS> at |)
        output: |

        input: {{|}} (press <BS> at |)
        output: |

        input: [[[[[[|]]]]]] (press <BS> at |)
        output: |

Fly Mode (|autopairs-flymode|): >

        input: if(a[3)
        output: if(a[3])| (In Fly Mode)
        output: if(a[3)]) (Without Fly Mode)

        input:
        {
            hello();|
            world();
        }

        (press } at |)

        output:
        {
            hello();
            world();
        }|

        (then press <M-b> at | to do backinsert)
        output:
        {
            hello();}|
            world();
        }

        See |Fly Mode| section for details

Only inserting when the next character is a space (*autopairs-tbd*)

==============================================================================
3. Fly Mode                                                  *autopairs-flymode*

Fly Mode will always force closed-pair jumping instead of inserting. Only for
")", "}", "]". If jumps in mistake, you can use |g:AutoPairsBackInsert| (default
Key: <M-b>) to jump back and insert closed pair.

The most situation maybe you want to insert single closed pair in the string,
eg: >

    ")"

Fly Mode is DISABLED by default. To enable Fly Mode add following to your
'.vimrc': >

    let g:AutoPairsFlyMode = 1

Default Options: >

    let g:AutoPairsFlyMode = 0
    let g:AutoPairsShortcutBackInsert = '<M-b>'

Note: Flymode is currently considered buggy and unreliable. It should be avoided
unless you enjoy spending time on flymode doing weird shit while you're
typing.

==============================================================================
4. Shortcuts                                               *autopairs-shortcuts*

System Shortcuts:
    <CR> : Insert new indented line after return if cursor in blank brackets
           or quotes.
    <BS> : Delete brackets in pair
    <M-p>: Toggle Autopairs (|g:AutoPairsShortcutToggle|)
    <M-e>: Fast Wrap (|g:AutoPairsShortcutFastWrap|)
    <M-n>: Jump to next closed pair (|g:AutoPairsShortcutJump|)
    <M-b>: BackInsert (|g:AutoPairsShortcutBackInsert|)


    To rebind keys <M-p>, <M-e> or <M-n> or in case of conflicts with
    another keys:

        let g:AutoPairsShortcutToggle = '<another key>'

    If the key is empty string '', then the shortcut will be disabled.

------------------------------------------------------------------------------
4.1. Remapping shortcuts                          *autopairs-shortcut-remapping*

At this time, most keybinds are remappable by using various options (see
|autopairs-options|). The goal is for all of them to be possible to remap.

Additionally, there's currently one keybind that lets you remap `<cr>`, to
prevent <cr> conflicts. It requires you to remap it explicitly, though.

==============================================================================
5. Options                                                   *autopairs-options*

These options exist in a global variant (`g:variableName`), and a local
variant (`b:variableName`), where `variableName` refers to some defined
variable. This is with the exception of keybind variables, that only exist in
one variant.

TL;DR: variables have a buffer variable if and only if it isn't a keybind
variable.

------------------------------------------------------------------------------
                                                                 *g:AutoPairs*
|g:AutoPairs|                                                             dict

Default: >
    {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":"'''", "`":"`"}

Specifies which symbols should be automatically paired.

To append new pairs without overwriting defaults, add values in your
`.vimrc`.: >
    let g:AutoPairs['<']='>'
<
This example will enable matching of `<` with `>`.

`g:AutoPair` additionally supports several types of multibyte pairs. If you're
frequently coding in an HTML template language, `"{%": "%}"` can be added to
the buffer variant of this variable (used in combination with an
`autocmd FileType`). The current behavior:
>
    Input: {|
    Output: {|}
    Input: %
    Output: {%|%}
<

There's built-in support for """ and ''', and more can be added if necessary.

------------------------------------------------------------------------------
                                                                   *b:AutoPairs*
|b:AutoPairs|                                                               dict

Default: |g:AutoPairs|

Buffer level pairs set.

You can set |b:AutoPairs| before |BufEnter|: >

    au Filetype FILETYPE let b:AutoPairs = {"(": ")"}

This sets |AutoPairs| to only match for parenthesis for 'FILETYPE'.

------------------------------------------------------------------------------
                                                    *g:AutoPairsCompleteOnSpace*
|g:AutoPairsCompleteOnSpace|                                              number

Default: 0

New in 3.0.0

------------------------------------------------------------------------------
                                                     *g:AutoPairsShortcutToggle*
|g:AutoPairsShortcutToggle|                                               string

Default: <M-p>

The shortcut to toggle autopairs.


------------------------------------------------------------------------------
                                                   *g:AutoPairsShortcutFastWrap*
|g:AutoPairsShortcutFastWrap|                                             string

Default: <M-e>

Fast wrap the word. All pairs will be considered as a block (including <>).

        (|)'hello' after fast wrap at |, the word will be ('hello')
        (|)<hello> after fast wrap at |, the word will be (<hello>)


------------------------------------------------------------------------------
                                                       *g:AutoPairsShortcutJump*
|g:AutoPairsShortcutJump|                                                 string

Default: <M-n>

Jump to the next closed pair.

------------------------------------------------------------------------------
                                                 *g:AutoPairsShortcutBackInsert*
|g:AutoPairsShortcutBackInsert|                                           string

Default: <M-b>

Work with |autopairs-flymode|, insert the key at the Fly Mode jumped position.


------------------------------------------------------------------------------
                                                              *g:AutoPairsMapBS*
|g:AutoPairsMapBS|                                                           int

Default: 0

Map <BS> to delete brackets and quotes in pair, executes:

    inoremap <buffer> <silent> <BS> <C-R>=AutoPairsDelete()<CR>

------------------------------------------------------------------------------
                                                              *g:AutoPairsMapCR*
|g:AutoPairsMapCR|                                                           int

Default: 1

Map <CR> to insert a new indented line if cursor in (|), {|} [|], '|', "|".
Executes: >
    inoremap <expr> <buffer> <silent> <CR> AutoPairsReturn()
<
------------------------------------------------------------------------------
                                                         *g:AutoPairsCenterLine*
|g:AutoPairsCenterLine|                                                      int

Default: 1

When |g:AutoPairsMapCR| is on, center current line after return if the line
is at the bottom 1/3 of the window.

------------------------------------------------------------------------------
                                                           *g:AutoPairsMapSpace*
|g:AutoPairsMapSpace|                                                        int

Default: 1

Map <space> to insert a space after the opening character and before the
closing one.

Executes:

    inoremap <buffer> <silent> <CR> <C-R>=AutoPairsSpace()<CR>

------------------------------------------------------------------------------
                                                            *g:AutoPairsFlyMode*
|g:AutoPairsFlyMode|                                                         int

Default: 0

Set it to 1 to enable |autopairs-flymode|.

------------------------------------------------------------------------------
                                                     *g:AutoPairsMultilineClose*
|g:AutoPairsMultilineClose|                                                  int

Default: 0

Krasjet's fork defined this to be 0 due to personal preference.

When you press the key for the closing pair (e.g. `)`) it jumps past it.
If set to 1, then it'll jump to the next line, if there is only 'whitespace'.
If set to 0, then it'll only jump to a closing pair on the same line.

------------------------------------------------------------------------------
                                                 *g:AutoPairsDirectoryBlacklist*
|g:AutoPairsDirectoryBlacklist|                                        path list

Default: []

Defines a set of directories (checked against |getcwd()|) in which the plugin
is disabled. This is pretty much a utility around `let b:autopairs_enabled = 0`,
which means the plugin is toggled in the buffer.

It's disabled by default as this means it's possible to load it after the
fact, where as a complete block wouldn't allow for manually enabling the
plugin, if desired.

See also |g:AutoPairsShortcutToggle|

------------------------------------------------------------------------------
                                                           *b:autopairs_enabled*

Type: int
Default: 1

This is a buffer variable that defines whether or not autopairs is enabled.
You can use this variable to get more fine-grained control over when the
plugin is enabled as well, if the built-in options aren't satisfactory.

==============================================================================
6. Troubleshooting                                   *autopairs-troubleshooting*

This plugin remaps keys `([{'"}]) <BS>`

If auto pairs cannot work, use |:imap| to check if the map is corrected.

The correct map should be: >

    <C-R>=AutoPairsInsert("\(")<CR>

Or the plugin conflicts with some other plugins. Use command: >
    :call AutoPairsInit()
<
to remap the keys.

--- How to insert parens purely? ---

There are 3 ways:

    1. Use `Ctrl-V )` to insert paren without trigger the plugin.

    2. Use `Alt-P` to turn off the plugin.

    3. Use `DEL` or `<C-O>x` to delete the character insert by plugin.

------------------------------------------------------------------------------
6.1. Conflicting keybinds                                 *autopairs-conflicts*

AutoPairs has a mapping that uses the alt key (meta) in such a way that it
conflicts with the letter å. This one specifically originates from Alt-E,
which is consumed by |g:AutoPairsShortcutFastWrap|.

While this is a known conflict, there could always be other. To see if there's
a conflict with a key on your keyboard, `verbose imap <insert letter>` and see
what it says. See: https://vi.stackexchange.com/q/20995/21251. You should be
able to backtrace the keybind from there, and using the options discussed in
|autopairs-conflicts|, remap it to something else.

From issues on the original autopairs repo, however, it's abundantly clear
that this isn't specific to scandinavian languages: a few of the meta keybinds
directly conflict with various letters for other european languages. Normally,
this wouldn't be a problem, but in insert mode mappings? They, to say the
least, introduces challenges.

The obvious option would be to remap them to something else. Personally, I
have no idea what I'd rather have some of these things mapped to. It's
definitely open for discussion to remap these to something more sane,
especially since mapping to meta in insert mode is, well, dumb, since
meta-<letter> has other meanings. I'll revisit this when I get some input on
the matter. Until then, if there's a conflict,  you'll need to track it down
(`verbose imap`) and fix it

==============================================================================
7. Credits                                                   *autopairs-credits*

Being a fork, this plugin does contain work from other people.

If it wasn't obvious already, the plugin itself is based on
jiangmiao/auto-pairs. Jiangmiao's work laid the foundation for this plugin.

Additionally, it contains quite a bit of work from Krasjet, as their work on a
fork for personal use has been merged into this plugin.

Additionally, there's a number of contributors to jiangmiao's upstream repo,
and in the future possibly directly on this fork, who have contributed to the
plugin. The complete list is available on GitHub:

    https://github.com/LunarWatcher/auto-pairs/graphs/contributors


vim:ft=help
